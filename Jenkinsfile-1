pipeline {
    agent any

    tools{
        maven "MAVEN_HOME"
    }

    environment {
        PROJECT_ROOT = 'src'
        EMAIL_ADDRESS = 'mingerez@gmail.com'
        REGISTRY = 'mgerez/ddsdeploy'
        SONARQUBE_URL = 'http://192.168.68.10:9000'
        SONAR_LOGIN = 'admin'
        SONAR_PASSWORD = 'sonar2024'

        // Variable para controlar qué etapas se ejecutan
        STAGE_TO_RUN = 'SCAN' // Cambia a 'CHECKOUT', 'DEPENDENCIES', 'TEST', 'SCAN', 'BUILD' según lo que quieras probar
    }

    stages {
        stage('Checkout') {
            when {
                anyOf {
                    environment name: 'STAGE_TO_RUN', value: 'CHECKOUT'
                    environment name: 'STAGE_TO_RUN', value: 'ALL'
                }
            }
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/mgerezqa/dds-app-libros-deploy.git']]])
            }
        }

        stage('Dependencies') {
            when {
                anyOf {
                    environment name: 'STAGE_TO_RUN', value: 'DEPENDENCIES'
                    environment name: 'STAGE_TO_RUN', value: 'ALL'
                }
            }
            steps {
                echo 'Instalando dependencias...'
                sh "mvn install -DskipTests"
            }
        }

        stage('Test') {
            when {
                anyOf {
                    environment name: 'STAGE_TO_RUN', value: 'TEST'
                    environment name: 'STAGE_TO_RUN', value: 'ALL'
                }
            }
            steps {
                echo 'Ejecutando los tests...'
                sh "mvn test"
            }
        }

        stage('SonarQube Scan') {
            when {
                anyOf {
                    environment name: 'STAGE_TO_RUN', value: 'SCAN'
                    environment name: 'STAGE_TO_RUN', value: 'ALL'
                }
            }
            environment {
                scannerHome = tool 'sonar-scanner'
            }
            steps {
                echo 'Escaneando el código con SonarQube...'
                withSonarQubeEnv('sonarqube') {
                    sh """
                        ${scannerHome}/bin/sonar-scanner \
                        -Dsonar.projectKey=dds-app-libros-deploy \
                        -Dsonar.projectName=dds-app-libros-deploy \
                        -Dsonar.projectVersion=0.0.${BUILD_NUMBER} \
                        -Dsonar.host.url=${SONARQUBE_URL} \
                        -Dsonar.sources=./${PROJECT_ROOT} \
                        -Dsonar.login=${SONAR_LOGIN} \
                        -Dsonar.password=${SONAR_PASSWORD} \
                        -Dsonar.tests=./${PROJECT_ROOT}/test \
                        -Dsonar.java.binaries=./${PROJECT_ROOT}/target/classes
                    """
                }
            }
        }

        stage('Build Docker Image') {
            when {
                anyOf {
                    environment name: 'STAGE_TO_RUN', value: 'BUILD'
                    environment name: 'STAGE_TO_RUN', value: 'ALL'
                }
            }
            steps {
                echo 'Construyendo la imagen Docker...'
                sh "docker build -t ${REGISTRY}:${BUILD_NUMBER} ./${PROJECT_ROOT}"
            }
        }

        stage('Deploy Docker Image') {
            when {
                anyOf {
                    environment name: 'STAGE_TO_RUN', value: 'DEPLOY'
                    environment name: 'STAGE_TO_RUN', value: 'ALL'
                }
            }
            steps {
                echo 'Subiendo la imagen a Docker Hub...'
                sh "docker login -u <tu-usuario> -p <tu-password>"
                sh "docker push ${REGISTRY}:${BUILD_NUMBER}"
            }
        }
    }

    post {
        success {
            echo 'Pipeline ejecutado correctamente.'
        }
        failure {
            echo 'Pipeline fallido.'
        }
    }
}
